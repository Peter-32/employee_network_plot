import json
import networkx as nx
from datetime import datetime
import matplotlib.pyplot as plt
%matplotlib inline
plt.rc('figure', figsize=[16,16])


location_mapping = {'US-OH-Columbus': 'Columbus',
 'US-NY-New York': 'New York',
 'US-CA-Remote (San Francisco)': 'Remote',
 'AU-Sydney': 'Sydney',
 'ZA-Cape Town': 'Cape Town',
 'US-TN-Remote (Santa Barbara)': 'Remote',
 'US-NY (Remote) UK': 'Remote',
 'US-WA-Seattle': 'Seattle',
 'EU-Poland': 'Remote',
 'US-CA-San Francisco': 'Remote',
 'US-NC-Remote (New York)': 'Remote',
 'US-CA-Remote (Santa Barbara)': 'Remote',
 'SG-Singapore': 'Singapore',
 'US-TX-Remote (Seattle)': 'Remote',
 '0. Advisor - US': 'Remote',
 'US-OH-Remote (Columbus)': 'Remote',
 'US-AZ-Remote (New York)': 'Remote',
 'US-AR-Remote (Columbus)': 'Remote',
 'NO-Oslo': 'Remote',
 'US-CO-Remote (New York)': 'Remote',
 'US-CA-Remote (Seattle)': 'Remote',
 'CN-Shanghai': 'Shanghai',
 'US-AZ-Remote (Seattle)': 'Remote',
 'US-CT-Remote (New York)': 'Remote',
 '0.Contractor': 'Remote',
 'GB-London': 'London',
 'US-CA-Santa Barbara': 'Santa Barbara',
 'Nepal (US-WA-Seattle': 'Seattle',
 'US-HI-Remote (Santa Barbara)': 'Remote',
#  'New York': 'New York',
#  'Cape Town': 'Cape Town',
#  'Santa Barbara': 'Santa Barbara',
#  'Remote': 'Remote',
 }

department_nodes = {'Product Management': [],
 'Sales': [],
 'None': [],
 'G&A': [],
 'Finance': [],
 'Support and Operations': [],
 'Marketing': [],
 'Technology': [],
 'People': []}

department_edges = {'Product Management': [],
 'Sales': [],
 'None': [],
 'G&A': [],
 'Finance': [],
 'Support and Operations': [],
 'Marketing': [],
 'Technology': [],
 'People': []}

location_nodes = {'Singapore': [],
 'Columbus': [],
 'Seattle': [],
 'Shanghai': [],
 'New York': [],
 'London': [],
 'Santa Barbara': [],
 'Cape Town': [],
 'Remote': [],
 'Sydney': []}

location_edges = {'Singapore': [],
 'Columbus': [],
 'Seattle': [],
 'Shanghai': [],
 'New York': [],
 'London': [],
 'Santa Barbara': [],
 'Cape Town': [],
 'Remote': [],
 'Sydney': []}




date = datetime.strptime('2020-01-14', '%Y-%m-%d')

G = nx.Graph()
# G=nx.cubical_graph()
pos=nx.planar_layout(G)

job_titles = []
locations = []
department_names = []
edge_list = []
names = []

with open('../../data/raw/data.json') as json_file:
    data = json.load(json_file)
    G.add_node("Top position")
    for person1 in data['directReports']:
        if date > datetime.strptime(person1['hireDate'], '%Y-%m-%d'):
            job_titles.append(person1['jobTitle'])
            locations.append(location_mapping[person1['location']])
            department_names.append(str(person1['departmentName']))
            G.add_node(person1['name'])
            department_nodes[str(person1['departmentName'])].append(person1['name'])
            location_nodes[location_mapping[person1['location']]].append(person1['name'])
            G.add_edge(person1['name'], "Top position")
            department_edges[str(person1['departmentName'])].append((person1['name'], "Top position"))
            location_edges[location_mapping[person1['location']]].append((person1['name'], "Top position"))
            person1_name = person1['name']
        else:
            person1_name = "Top position"
        names.append(person1_name)
        for person2 in person1['directReports']:
            if date > datetime.strptime(person2['hireDate'], '%Y-%m-%d'):
                job_titles.append(person2['jobTitle'])
                locations.append(location_mapping[person2['location']])
                department_names.append(str(person2['departmentName']))
                G.add_node(person2['name'])
                department_nodes[str(person2['departmentName'])].append(person2['name'])
                location_nodes[location_mapping[person2['location']]].append(person2['name'])
                G.add_edge(person2['name'], person1_name)
                department_edges[str(person2['departmentName'])].append((person2['name'], person1_name))
                location_edges[location_mapping[person2['location']]].append((person2['name'], person1_name))
                person2_name = person2['name']
            else:
                person2_name = person1['name'] if date > datetime.strptime(person1['hireDate'], '%Y-%m-%d') else "Top position"
            names.append(person2_name)
            for person3 in person2['directReports']:
                if date > datetime.strptime(person3['hireDate'], '%Y-%m-%d'):
                    job_titles.append(person3['jobTitle'])
                    locations.append(location_mapping[person3['location']])
                    department_names.append(str(person3['departmentName']))
                    G.add_node(person3['name'])
                    department_nodes[str(person3['departmentName'])].append(person3['name'])
                    location_nodes[location_mapping[person3['location']]].append(person3['name'])
                    G.add_edge(person3['name'], person2_name)
                    department_edges[str(person3['departmentName'])].append((person3['name'], person2_name))
                    location_edges[location_mapping[person3['location']]].append((person3['name'], person2_name))
                    person3_name = person3['name']
                else:
                    person3_name = person2['name'] if date > datetime.strptime(person2['hireDate'], '%Y-%m-%d') else person1['name'] if date > datetime.strptime(person1['hireDate'], '%Y-%m-%d') else "Top position"
                names.append(person3_name)
                for person4 in person3['directReports']:
                    if date > datetime.strptime(person4['hireDate'], '%Y-%m-%d'):
                        job_titles.append(person4['jobTitle'])
                        locations.append(location_mapping[person4['location']])
                        department_names.append(str(person4['departmentName']))
                        G.add_node(person4['name'])
                        department_nodes[str(person4['departmentName'])].append(person4['name'])
                        location_nodes[location_mapping[person4['location']]].append(person4['name'])
                        G.add_edge(person4['name'], person3_name)
                        department_edges[str(person4['departmentName'])].append((person4['name'], person3_name))
                        location_edges[location_mapping[person4['location']]].append((person4['name'], person3_name))
                        person4_name = person4['name']
                    else:
                        person4_name = person3['name'] if date > datetime.strptime(person3['hireDate'], '%Y-%m-%d') else person2['name'] if date > datetime.strptime(person2['hireDate'], '%Y-%m-%d') else person1['name'] if date > datetime.strptime(person1['hireDate'], '%Y-%m-%d') else "Top position"
                    names.append(person4_name)
                    for person5 in person4['directReports']:
                        if date > datetime.strptime(person5['hireDate'], '%Y-%m-%d'):
                            job_titles.append(person5['jobTitle'])
                            locations.append(location_mapping[person5['location']])
                            department_names.append(str(person5['departmentName']))
                            G.add_node(person5['name'])
                            department_nodes[str(person5['departmentName'])].append((person1['name']))
                            location_nodes[location_mapping[person5['location']]].append(person5['name'])
                            G.add_edge(person5['name'], person4_name)
                            department_edges[str(person5['departmentName'])].append((person5['name'], person4_name))
                            location_edges[location_mapping[person5['location']]].append((person5['name'], person4_name))
                            person5_name = person5['name']
                        else:
                            person5_name = person4['name'] if date > datetime.strptime(person4['hireDate'], '%Y-%m-%d') else person3['name'] if date > datetime.strptime(person3['hireDate'], '%Y-%m-%d') else person2['name'] if date > datetime.strptime(person2['hireDate'], '%Y-%m-%d') else person1['name'] if date > datetime.strptime(person1['hireDate'], '%Y-%m-%d') else "Top position"
                        names.append(person5_name)

# name_to_number_mapping = dict([(y,x) for (x,y) in zip(range(456), list(set(names)))])


# nx.draw_networkx_nodes(G,pos=nx.spring_layout(G),
#                        nodelist=department_nodes['Product Management'],
# #                        nodelist=[name_to_number_mapping[x] for x in department_nodes['Product Management']],
#                        node_color='#b5a265',
#                        with_labels=False,
#                         label='Product Management',
#                    alpha=0.8)
# nx.draw_networkx_nodes(G,pos,
#                        nodelist=department_nodes['Sales'],
#                        node_color='#d43a2f',
#                        with_labels=False,
#                        label='Sales',
#                    alpha=0.8)
# nx.draw_networkx_nodes(G,pos,
#                        nodelist=department_nodes['None'],
#                        node_color='#b5abaa',
#                        with_labels=False,
#                        label='None',
#                    alpha=0.8)
# nx.draw_networkx_nodes(G,pos,
#                        nodelist=department_nodes['G&A'],
#                        node_color='#150782',
#                        with_labels=False,
#                        label='Executive',
#                    alpha=0.8)
# nx.draw_networkx_nodes(G,pos,
#                        nodelist=department_nodes['Finance'],
#                        node_color='#17cf0a',
#                        with_labels=False,
#                        label='Finance',
#                    alpha=0.8)
# nx.draw_networkx_nodes(G,pos,
#                        nodelist=department_nodes['Support and Operations'],
#                        node_color='#faf619',
#                        with_labels=False,
#                        label='Support and Operations',
#                    alpha=0.8)
# nx.draw_networkx_nodes(G,pos,
#                        nodelist=department_nodes['Marketing'],
#                        node_color='#ffb700',
#                        with_labels=False,
#                        label='Marketing',
#                    alpha=0.8)
# nx.draw_networkx_nodes(G,pos,
#                        nodelist=department_nodes['Technology'],
#                        node_color='#07deed',
#                        with_labels=False,
#                        label='Technology',
#                    alpha=0.8)
# nx.draw_networkx_nodes(G,pos,
#                        nodelist=department_nodes['People'],
#                        node_color='#e3d698',
#                        with_labels=False,
#                        label='People',
#                    alpha=0.8)


# nx.draw_networkx_edges(G,pos,
#                        edgelist=edge_list,
#                        width=8,alpha=0.5)


nx.draw(G, with_labels=False, font_weight='bold')
plt.legend(loc='fit')





# name_to_number_mapping = dict([(y,x) for (x,y) in zip(range(456), list(set(names)))])


# nx.draw_networkx_nodes(G,pos=nx.spring_layout(G),
#                        nodelist=department_nodes['Product Management'],
# #                        nodelist=[name_to_number_mapping[x] for x in department_nodes['Product Management']],
#                        node_color='#b5a265',
#                        with_labels=False,
#                         label='Product Management',
#                    alpha=0.8)
# nx.draw_networkx_nodes(G,pos,
#                        nodelist=department_nodes['Sales'],
#                        node_color='#d43a2f',
#                        with_labels=False,
#                        label='Sales',
#                    alpha=0.8)
# nx.draw_networkx_nodes(G,pos,
#                        nodelist=department_nodes['None'],
#                        node_color='#b5abaa',
#                        with_labels=False,
#                        label='None',
#                    alpha=0.8)
# nx.draw_networkx_nodes(G,pos,
#                        nodelist=department_nodes['G&A'],
#                        node_color='#150782',
#                        with_labels=False,
#                        label='Executive',
#                    alpha=0.8)
# nx.draw_networkx_nodes(G,pos,
#                        nodelist=department_nodes['Finance'],
#                        node_color='#17cf0a',
#                        with_labels=False,
#                        label='Finance',
#                    alpha=0.8)
# nx.draw_networkx_nodes(G,pos,
#                        nodelist=department_nodes['Support and Operations'],
#                        node_color='#faf619',
#                        with_labels=False,
#                        label='Support and Operations',
#                    alpha=0.8)
# nx.draw_networkx_nodes(G,pos,
#                        nodelist=department_nodes['Marketing'],
#                        node_color='#ffb700',
#                        with_labels=False,
#                        label='Marketing',
#                    alpha=0.8)
# nx.draw_networkx_nodes(G,pos,
#                        nodelist=department_nodes['Technology'],
#                        node_color='#07deed',
#                        with_labels=False,
#                        label='Technology',
#                    alpha=0.8)
# nx.draw_networkx_nodes(G,pos,
#                        nodelist=department_nodes['People'],
#                        node_color='#e3d698',
#                        with_labels=False,
#                        label='People',
#                    alpha=0.8)


# nx.draw_networkx_edges(G,pos,
#                        edgelist=edge_list,
#                        width=8,alpha=0.5)
